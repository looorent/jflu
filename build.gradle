def repoUser = hasProperty('ossrhUser') ? ossrhUser : System.getenv('ossrhUser')
def repoPassword = hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhUser')

apply plugin: 'io.codearte.nexus-staging'

ext {
  junitVersion = "4.12"
  slf4jVersion = "1.7.21"
  jacksonVersion = "2.8.5"
  rabbitmqVersion = "3.6.5"
  spockVersion = "1.3-groovy-2.5"
  groovyVersion = "2.5.7"
  systemRulesVersion = "1.16.1"
  quarkusVersion = "1.0.0.CR1"
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
  }
}

subprojects {

  apply plugin: "java"
  apply plugin: "groovy"
  apply plugin: "idea"

  group = "be.looorent"
  version "0.13.7"

  repositories {
      mavenCentral()
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  dependencies {
    compile group: 'org.slf4j',     name: 'slf4j-api',      version: slf4jVersion

    testCompile group: 'junit',               name: 'junit',        version: junitVersion
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all',   version: groovyVersion
    testCompile group: 'org.spockframework',  name: 'spock-core',   version: spockVersion
    testCompile group: 'cglib',               name: 'cglib-nodep',  version: '3.2.12'
    testCompile group: 'org.objenesis',       name: 'objenesis',    version: '3.0.1'
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      maven(MavenPublication) {
        from components.java
      }
    }
  }

  if (project.hasProperty('release')) {
    allprojects {
      apply plugin: 'signing'
      apply plugin: 'maven'

      task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
      }

      task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
      }

      artifacts {
        archives sourcesJar
        archives javadocJar
      }

      jar {
        manifest {
          attributes 'Implementation-Version': version, 'provider': gradle
        }
      }

      signing {
        sign configurations.archives
      }

      uploadArchives {
        repositories {
          mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
              authentication(userName: repoUser, password: repoPassword)
            }

            pom.project {
              name project.name
              description project.description
              packaging 'jar'
              url 'https://github.com/looorent/jflu'

              scm {
                connection 'scm:git:https://github.com/looorent/jflu'
                developerConnection 'scm:git:git@github.com:looorent/jflu.git'
                url 'https://github.com/looorent/jflu'
              }

              licenses {
                license {
                  name 'The MIT License (MIT)'
                  url 'http://opensource.org/licenses/MIT'
                  distribution 'repo'
                }
              }

              developers {
                developer {
                  id = 'looorent'
                  name = 'Lorent Lempereur'
                  email = 'lorent.lempereur.dev@gmail.com'
                }
              }
            }
          }
        }
      }
    }
  }
}

project(":jflu-core") {
  dependencies {
    compile group: 'com.fasterxml.jackson.core',     name: 'jackson-annotations',     version: jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    compile group: 'org.reflections',                name: 'reflections',             version: '0.9.10'
  }
}

project(":jflu-producer-hibernate") {
  description = "JFlu Hibernate Interceptor to generate events from entities"

  dependencies {
    compile project(":jflu-core")
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.4.Final'
  }
}

project(":jflu-producer-rabbitmq") {
  dependencies {
    compile project(":jflu-core")
    compile group: 'com.rabbitmq', name: 'amqp-client', version: rabbitmqVersion

    testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: systemRulesVersion
  }
}

project(":jflu-producer-springmvc") {
  dependencies {
    compile project(":jflu-core")
    compile group: 'org.springframework', name: 'spring-webmvc',     version: '4.3.4.RELEASE'
    compile group: 'javax.servlet',       name: 'javax.servlet-api', version: '3.1.0'
  }
}

project(":jflu-subscriber-rabbitmq") {
  dependencies {
    compile project(":jflu-core")
    compile group: 'com.rabbitmq',  name: 'amqp-client', version: rabbitmqVersion
  }
}

project(":jflu-producer-rabbitmq-quarkus") {
  jar {
    archiveBaseName = "jflu-producer-rabbitmq-quarkus"
  }

  dependencies {
    compile project(":jflu-core")
    compile project(":jflu-producer-rabbitmq")
    compile group: 'io.quarkus',  name: 'quarkus-core', version: quarkusVersion
    compile group: 'io.quarkus.arc', name: 'arc', version: quarkusVersion
    compile group: 'io.quarkus', name: 'quarkus-arc', version: quarkusVersion
  }
}

project(":jflu-producer-rabbitmq-quarkus-deployment") {
  dependencies {
    compile project(":jflu-producer-rabbitmq-quarkus")
    compile group: 'io.quarkus', name: 'quarkus-core-deployment', version: quarkusVersion
    compile group: 'io.quarkus', name: 'quarkus-arc-deployment', version: quarkusVersion
  }
}

project(":jflu-store") {
  apply plugin: 'application'
  mainClassName = "be.looorent.jflu.store.EventStore"

  dependencies {
    compile project(":jflu-core")
    compile project(":jflu-subscriber-rabbitmq")
    compile project(":jflu-producer-rabbitmq")
    compile group: 'org.liquibase',  name: 'liquibase-core',  version: '3.5.3'
    compile group: 'org.postgresql', name: 'postgresql',      version: '9.4.1212'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    compile group: 'ch.qos.logback', name: 'logback-core',    version: '1.1.7'
  }

  apply plugin: 'application'
  task replay(type: JavaExec) {
      classpath sourceSets.main.runtimeClasspath
      main = "be.looorent.jflu.store.ReplayService"
      if (project.hasProperty("firstEventId") ) {
        args Eval.me(firstEventId)
      }
  }
}

nexusStaging {
  username = repoUser
  password = repoPassword
  packageGroup = "be.looorent"
}