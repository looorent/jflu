def repoUser = hasProperty("ossrhUser") ? ossrhUser : System.getenv("ossrhUser")
def repoPassword = hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("ossrhUser")

apply plugin: "io.codearte.nexus-staging"

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$nexusVersion"
        classpath "org.beryx:badass-jlink-plugin:$jlinkVersion"
    }
}

def moduleProjects = [
        "jflu-core",
        "jflu-producer-hibernate",
        "jflu-producer-rabbitmq",
        "jflu-producer-springmvc",
        "jflu-subscriber-rabbitmq",
        "jflu-subscriber-reflection",
        "jflu-store"
]


subprojects {
    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: "idea"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group = "be.looorent"
    version "1.0.3"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        api "org.slf4j:slf4j-api:$slf4jVersion"

        testCompile (
                "org.codehaus.groovy:groovy-all:$groovyVersion",
                "org.junit.jupiter:junit-jupiter-api:$junitVersion",
                "org.junit.vintage:junit-vintage-engine:$junitVersion",
                "org.spockframework:spock-core:$spockVersion",
                "cglib:cglib-nodep:$cglibVersion",
                "org.objenesis:objenesis:$objenesisVersion"
        )
    }

    javadoc {
        exclude "module-info.java"
    }

    compileJava {
        exclude "module-info.java"
        options.compilerArgs = ["--release", "8"]
    }

    if (name in moduleProjects) {
        task compileModuleInfoJava(type: JavaCompile) {
            classpath = files()
            source = "src/main/java/module-info.java"
            destinationDir = compileJava.destinationDir

            doFirst {
                options.compilerArgs = [
                        "--release", "9",
                        "--module-path", compileJava.classpath.asPath,
                ]
            }
        }

        compileModuleInfoJava.dependsOn compileJava
        classes.dependsOn compileModuleInfoJava
    }

    test {
        useJUnitPlatform()
    }

    apply plugin: "maven-publish"

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

    if (project.hasProperty("release")) {
        allprojects {
            apply plugin: "signing"
            apply plugin: "maven"

            task sourcesJar(type: Jar, dependsOn: classes) {
                archiveClassifier = "sources"
                from sourceSets.main.allSource
            }

            task javadocJar(type: Jar, dependsOn: javadoc) {
                archiveClassifier = "javadoc"
                from javadoc.destinationDir
            }

            artifacts {
                archives sourcesJar
                archives javadocJar
            }

            jar {
                manifest {
                    attributes "Implementation-Version": archiveVersion, "provider": gradle
                }
            }

            signing {
                sign configurations.archives
            }

            uploadArchives {
                repositories {
                    mavenDeployer {
                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            authentication(userName: repoUser, password: repoPassword)
                        }

                        pom.project {
                            name project.name
                            description project.description
                            packaging "jar"
                            url "https://github.com/looorent/jflu"

                            scm {
                                connection "scm:git:https://github.com/looorent/jflu"
                                developerConnection "scm:git:git@github.com:looorent/jflu.git"
                                url "https://github.com/looorent/jflu"
                            }

                            licenses {
                                license {
                                    name "The MIT License (MIT)"
                                    url "http://opensource.org/licenses/MIT"
                                    distribution "repo"
                                }
                            }

                            developers {
                                developer {
                                    id = "looorent"
                                    name = "Lorent Lempereur"
                                    email = "lorent.lempereur.dev@gmail.com"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

project(":jflu-core") {
    dependencies {
        implementation (
                "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
        )
    }
}

project(":jflu-producer-hibernate") {
    description = "JFlu Hibernate Interceptor to generate events from entities"

    dependencies {
        compile project(":jflu-core")
        compileOnly "org.hibernate:hibernate-core:$hibernateVersion"
    }
}

project(":jflu-producer-rabbitmq") {
    dependencies {
        compile project(":jflu-core")
        api (
                "com.rabbitmq:amqp-client:$rabbitmqVersion"
        )
        implementation(
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        )
        testCompile "com.github.stefanbirkner:system-rules:$systemRulesVersion"
    }
}

project(":jflu-producer-springmvc") {
    dependencies {
        compile project(":jflu-core")
        compileOnly "org.springframework:spring-webmvc:$springVersion"
        implementation "javax.servlet:javax.servlet-api:$servletVersion"
    }
}

project(":jflu-subscriber-rabbitmq") {
    dependencies {
        compile project(":jflu-core")
        api (
                "com.rabbitmq:amqp-client:$rabbitmqVersion"
        )
        implementation(
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        )
    }
}

project(":jflu-subscriber-reflection") {
    dependencies {
        compile project(":jflu-core")
        implementation "org.reflections:reflections:$reflectionVersion"
    }
}

project(":jflu-producer-rabbitmq-quarkus") {
    jar {
        archiveBaseName = "jflu-producer-rabbitmq-quarkus"
    }

    dependencies {
        api project(":jflu-core")
        api project(":jflu-producer-rabbitmq")
        compileOnly(
                "io.quarkus:quarkus-core:$quarkusVersion",
                "io.quarkus.arc:arc:$quarkusVersion",
                "io.quarkus:quarkus-arc:$quarkusVersion"
        )
    }
}

project(":jflu-producer-rabbitmq-quarkus-deployment") {
    dependencies {
        compile project(":jflu-producer-rabbitmq-quarkus")
        compileOnly(
                "io.quarkus:quarkus-core-deployment:$quarkusVersion",
                "io.quarkus:quarkus-arc-deployment:$quarkusVersion"
        )
    }
}

project(":jflu-store") {
    apply plugin: "java"
    apply plugin: "org.beryx.jlink"

    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13

    jlink {
        addExtraDependencies (
                "jackson"
        )
        options = ["--strip-java-debug-attributes", "--compress", "2", "--no-header-files", "--no-man-pages"]
    }

    mainClassName = "jflu.subscriber.store/be.looorent.jflu.store.EventStore"

    dependencies {
        compile project(":jflu-core")
        compile project(":jflu-subscriber-rabbitmq")
        compile project(":jflu-producer-rabbitmq")

        implementation(
                "com.google.guava:guava:$guavaVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "org.liquibase:liquibase-core:$liquibaseVersion",
                "org.postgresql:postgresql:$postgresVersion",
                "ch.qos.logback:logback-classic:$logbackVersion",
                "ch.qos.logback:logback-core:$logbackVersion",
                "javax.servlet:javax.servlet-api:$servletVersion"
        )
    }

    apply plugin: "application"
    task replay(type: JavaExec) {
        classpath sourceSets.main.runtimeClasspath
        main = "be.looorent.jflu.store.ReplayService"
        if (project.hasProperty("firstEventId")) {
            args Eval.me(firstEventId)
        }
    }
}

nexusStaging {
    username = repoUser
    password = repoPassword
    packageGroup = "be.looorent"
}