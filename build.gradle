buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "io.quarkus.extension:gradle-extension-plugin:$quarkusVersion"
        classpath "org.kordamp.gradle:jandex-gradle-plugin:$jandexVersion"
    }
}

plugins {
    id "idea"
    id "java-library"
    id "groovy"
    id "maven-publish"
    id "signing"
    id "com.github.ben-manes.versions" version "$outdatedVersion"
    id "org.beryx.jlink" version "$jlinkVersion" apply false
}

def sonatypeUsername = hasProperty("ossrhUser") ? ossrhUser : System.getenv("ossrhUser")
def sonatypePassword = hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("ossrhPassword")

def moduleProjects = [
        "jflu-core",
        "jflu-producer-hibernate",
        "jflu-producer-rabbitmq",
        "jflu-producer-springmvc",
        "jflu-subscriber-rabbitmq",
        "jflu-subscriber-reflection",
        "jflu-store"
]

subprojects {
    group "net.commuty"

    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "org.kordamp.gradle.jandex"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group = "be.looorent"
    version "1.1.0"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    java.modularity.inferModulePath = false

    java {
        withJavadocJar()
        withSourcesJar()
    }

    dependencies {
        api "org.slf4j:slf4j-api:$slf4jVersion"

        testImplementation (
                "org.codehaus.groovy:groovy-all:$groovyVersion",
                "org.junit.jupiter:junit-jupiter-api:$junitVersion",
                "org.junit.vintage:junit-vintage-engine:$junitVersion",
                "org.spockframework:spock-core:$spockVersion",
                "cglib:cglib-nodep:$cglibVersion",
                "org.objenesis:objenesis:$objenesisVersion"
        )
    }

    javadoc {
        exclude "module-info.java"
    }

    compileJava {
        exclude "module-info.java"
        options.compilerArgs = ["--release", "8"]
    }

    if (name in moduleProjects) {
        task compileModuleInfoJava(type: JavaCompile) {
            classpath = files()
            source = "src/main/java/module-info.java"
            destinationDir = compileJava.destinationDir

            doFirst {
                options.compilerArgs = [
                        "--release", "9",
                        "--module-path", compileJava.classpath.asPath,
                ]
            }
        }

        compileModuleInfoJava.dependsOn compileJava
        classes.dependsOn compileModuleInfoJava
    }

    test {
        useJUnitPlatform()
    }
}

project(":jflu-core") {
    description = "JFlu core elements"
    dependencies {
        implementation (
                "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
        )
    }
}

project(":jflu-producer-hibernate") {
    description = "JFlu Hibernate Interceptor to generate events from entities"

    dependencies {
        implementation project(":jflu-core")
        compileOnly "org.hibernate:hibernate-core:$hibernateVersion"
    }
}

project(":jflu-producer-rabbitmq") {
    description = "JFlu Connector to emit event to RabbitMQ"

    dependencies {
        implementation(
                project(":jflu-core"),
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        )
        api (
                "com.rabbitmq:amqp-client:$rabbitmqVersion"
        )
        testImplementation "com.github.stefanbirkner:system-rules:$systemRulesVersion"
    }
}

project(":jflu-producer-springmvc") {
    description = "JFlu Connector to emit event when Spring controllers are called"
    dependencies {
        implementation (
                project(":jflu-core"),
                "javax.servlet:javax.servlet-api:$servletVersion"
        )
        compileOnly "org.springframework:spring-webmvc:$springVersion"
    }
}

project(":jflu-subscriber-rabbitmq") {
    description = "JFlu Connector to listen events from RabbitMQ"
    dependencies {
        implementation (
                project(":jflu-core"),
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        )
        api (
                "com.rabbitmq:amqp-client:$rabbitmqVersion"
        )
    }
}

project(":jflu-subscriber-reflection") {
    description = "JFlu Connector that allow developers to automatically subscribe to queues using reflection"
    dependencies {
        implementation project(":jflu-core")
        implementation "org.reflections:reflections:$reflectionVersion"
    }
}

project(":jflu-producer-rabbitmq-quarkus") {
    description = "JFlu Connector for RabbitMQ on Quarkus"
    jar {
        archiveBaseName = "jflu-producer-rabbitmq-quarkus"
    }

    apply plugin: "io.quarkus.extension"

    quarkusExtension {
        deploymentModule = 'jflu-producer-rabbitmq-quarkus-deployment'
    }

    dependencies {
        implementation platform("io.quarkus:quarkus-bom:$quarkusVersion")
        api project(":jflu-core")
        api project(":jflu-producer-rabbitmq")
        compileOnly (
                "io.quarkus:quarkus-core:$quarkusVersion",
                "io.quarkus.arc:arc:$quarkusVersion",
                "io.quarkus:quarkus-arc:$quarkusVersion"
        )
    }
}

project(":jflu-producer-rabbitmq-quarkus-deployment") {
    description = "JFlu Connector for RabbitMQ on Quarkus - deployment"
    dependencies {
        implementation project(":jflu-producer-rabbitmq-quarkus")
        compileOnly (
                "io.quarkus:quarkus-core-deployment:$quarkusVersion",
                "io.quarkus:quarkus-arc-deployment:$quarkusVersion"
        )
    }
}


project(":jflu-subscriber-rabbitmq-quarkus") {
    description = "JFlu Subscriber for RabbitMQ on Quarkus"
    jar {
        archiveBaseName = "jflu-susbcriber-rabbitmq-quarkus"
    }

    apply plugin: "io.quarkus.extension"

    quarkusExtension {
        deploymentModule = 'jflu-subscriber-rabbitmq-quarkus-deployment'
    }

    dependencies {
        implementation platform("io.quarkus:quarkus-bom:$quarkusVersion")
        api project(":jflu-core")
        api project(":jflu-subscriber-rabbitmq")
        compileOnly (
                "io.quarkus:quarkus-core:$quarkusVersion",
                "io.quarkus.arc:arc:$quarkusVersion",
                "io.quarkus:quarkus-arc:$quarkusVersion"
        )
    }
}

project(":jflu-subscriber-rabbitmq-quarkus-deployment") {
    description = "JFlu subscriber for RabbitMQ on Quarkus - deployment"
    dependencies {
        implementation project(":jflu-subscriber-rabbitmq-quarkus")
        compileOnly (
                "io.quarkus:quarkus-core-deployment:$quarkusVersion",
                "io.quarkus:quarkus-arc-deployment:$quarkusVersion"
        )
    }
}



project(":jflu-store") {
    description = "JFlu Connector for RabbitMQ on Quarkus - deployment"

    apply plugin: "java"
    apply plugin: "org.beryx.jlink"
    apply plugin: "application"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    jlink {
        addExtraDependencies (
                "jackson"
        )
        options = ["--strip-java-debug-attributes", "--compress", "2", "--no-header-files", "--no-man-pages"]
    }

    mainClassName = "jflu.subscriber.store/be.looorent.jflu.store.EventStore"

    dependencies {
        implementation (
                project(":jflu-core"),
                project(":jflu-subscriber-rabbitmq"),
                project(":jflu-producer-rabbitmq"),
                "com.google.guava:guava:$guavaVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "org.liquibase:liquibase-core:$liquibaseVersion",
                "org.postgresql:postgresql:$postgresVersion",
                "ch.qos.logback:logback-classic:$logbackVersion",
                "ch.qos.logback:logback-core:$logbackVersion",
                "javax.servlet:javax.servlet-api:$servletVersion"
        )
    }

    task replay(type: JavaExec) {
        classpath sourceSets.main.runtimeClasspath
        mainClass = "be.looorent.jflu.store.ReplayService"
        if (project.hasProperty("firstEventId")) {
            args Eval.me(firstEventId)
        }
    }
}

subprojects {
    apply plugin: "maven-publish"

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.name
                from components.java
                versionMapping {
                    usage("java-api") {
                        fromResolutionOf("runtimeClasspath")
                    }
                    usage("java-runtime") {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/looorent/jflu"
                    licenses {
                        license {
                            name = "The MIT License (MIT)"
                            url = "http://opensource.org/licenses/MIT"
                        }
                    }
                    developers {
                        developer {
                            id = "looorent"
                            name = "Lorent Lempereur"
                            email = "lorent.lempereur.dev@gmail.com"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/looorent/jflu"
                        developerConnection = "scm:git:git@github.com:looorent/jflu.git"
                        url = "https://github.com/looorent/jflu"
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
                allowInsecureProtocol=true
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    apply plugin: "signing"
    signing {
        sign publishing.publications.mavenJava
    }
}
